##########################################################################################################################
#File automatically -                                                                              \
    generated by                                                                                   \
        tool : [projectgenerator] version : [3.0.0] date : [Wed Nov 28 16 : 34 : 23 CST 2018]
##########################################################################################################################

#-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
#Generic Makefile(based on gcc)
#
#ChangeLog:
# 2017 - 02 - 10 - Several enhancements + project update mode
# 2015 - 07 - 22 - first version
#-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --



######################################
#target
######################################
TARGET = discovery


######################################
#building variables
######################################
#make flags, default to 8 job
MAKEFLAGS = j8
#debug build ?
DEBUG = 1
#optimization
OPT = -O2


#######################################
#paths
#######################################
#Build path
BUILD_DIR = Build

######################################
#source
######################################
#C sources
C_SOURCES +=

include Application/BoardDriver/subdir.mk
include Application/CLI/subdir.mk
include Application/DFU/subdir.mk
include Application/SimpleUI/subdir.mk
include Application/UsbLogger/subdir.mk
include Board/STM32L476G-Discovery/subdir.mk
include drivers/BSP/subdir.mk
include lib/EEPROM_Emul/subdir.mk
include lib/STM32L4xx_HAL_Driver/subdir.mk
include lib/STM32_USB_Device_Library/subdir.mk
include lib/USB_DEVICE/subdir.mk
include lib/FreeRTOS/subdir.mk

#ASM sources
ASM_SOURCES =  \
startup_stm32l476xx.s


#######################################
#binaries
#######################################
PREFIX = arm-none-eabi-
#The gcc compiler bin path can be either defined in make command via GCC_PATH variable(            \
    > make GCC_PATH = xxx)
#either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
GDB = $(PREFIX)gdb
AR = $(PREFIX)ar
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
GDB = $(PREFIX)gdb
AR = $(PREFIX)ar
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
#CFLAGS
#######################################
#cpu
CPU = -mcpu=cortex-m4

#fpu
FPU = -mfpu=fpv4-sp-d16

#float - abi
FLOAT-ABI = -mfloat-abi=hard

#mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

#macros for gcc
#AS defines
AS_DEFS =

#C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32 \
-DSTM32L476xx

#AS includes
AS_INCLUDES =  \
-ICore/Inc

#C includes
C_INCLUDES +=


#compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

#Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
#LDFLAGS
#######################################
#link script
LDSCRIPT = STM32L476VGTx_FLASH.ld

#libraries
LIBS = -lc -lm -lnosys	# C / Math / nosys
LIBDIR =
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

#default action : build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
#build the application
#######################################
#list of objects
OBJECTS += $(addprefix $(BUILD_DIR)/, $(C_SOURCES:.c=.o))
vpath %.c $(sort $(C_SOURCES))

#list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/, $(ASM_SOURCES:.s=.o))
vpath %.s $(sort $(ASM_SOURCES))

# Compile all C files
$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	@echo " $(TARGET): [CC]" $(patsubst $(BUILD_DIR)/%,%,$<)
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(<:.c=.lst) $< -o $@

# Compile all ASM files
$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@echo " $(TARGET): [AS]" $(patsubst $(BUILD_DIR)/%,%,$<)
	@$(AS) -c $(CFLAGS) $< -o $@

# Link all objects
$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@$(AR) rcs $(BUILD_DIR)/$(TARGET).a $(OBJECTS)
	@echo " $(TARGET): [LD]" $(patsubst $(BUILD_DIR)/%, %, $@)
	@$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

# Convert elf to hex
$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@

# Convert elf to bin
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@

# Prepare build directory
$(BUILD_DIR):
	mkdir $@
	-mkdir -p $(sort $(addprefix $(BUILD_DIR)/, $(dir $(C_SOURCES))))
	-mkdir -p $(sort $(addprefix $(BUILD_DIR)/, $(dir $(ASM_SOURCES))))

#######################################
#Compile and download to unit
#######################################
install: all
	st-flash --reset write $(BUILD_DIR)/$(TARGET).bin 0x8000000

install2: all
	st-flash --reset write $(BUILD_DIR)/$(TARGET).bin 0x8080000

clean_install: all
	st-flash erase
	st-flash write $(BUILD_DIR)/$(TARGET).bin 0x8000000
	st-flash reset

dual_install: all
	st-flash erase
	st-flash write $(BUILD_DIR)/$(TARGET).bin 0x8000000
	st-flash --reset write $(BUILD_DIR)/$(TARGET).bin 0x8080000

#######################################
#Compile and start debug
#######################################
debug: all
	$(GDB) $(BUILD_DIR)/$(TARGET).elf -ex "tar ext :4242" -ex "load"

#######################################
#clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

#######################################
#dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
